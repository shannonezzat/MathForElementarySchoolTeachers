<?xml version='1.0' encoding='utf-8'?>

<chapter xml:id="ArithmeticAlgorithms" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Arithmetic Algorithms</title>
  
    <introduction>
    <p>
        In this section, we will talk about the ways we do arithmetic in practice. If you think about it, the methods we use to do arithmetic are a series of steps (a good analogy is a recipe) that we follow to obtain an answer. In mathematics we care about these enough to give them their own name: 

    </p>
    <definition xml:id="def-Algorithm">
        <statement>
            <p>
                An <term>algorithm</term> is a (finite) series of well-defined steps that will always solve a certain class of problems if correctly followed. 
            </p>
        </statement>
    </definition>
    <p>
        There are countless algorithms for solving arithmetic problems for whole numbers (which we can use to solve arithmetic problems in larger sets of numbers, like integers, rational numbers, or real numnbers). We will discuss a few of the most common algorithms that are used, discuss the pros and cons of each, and also discuss some non-algorithmic and ad-hoc methods that are widely used, especially when it comes to mental arithmetic. </p>

        <p>
            Most, if not all, of the following algorithms use the fact that we write numbers in a place-value system to break the computation into easier parts that we can put together at the end.</p>
    
        
        <p>
            Is there a "best" algorithm for each arithmetic operation? Depending on what you care about (speed, efficiency, ease of understanding, consistency in all cases), a different algorithm can be "better" than others. Regarding understanding, the most understandable algorithm may differ from student to student, and from teacher to teacher. So it is a very hard (and in some cases impossible) task to exclusively recommend one algorithm over another.
        </p>
        <p>
            It is important to study multiple algorithms for many reasons. Forst of all, understanding the details of an algorithm allows a teacher to explain how and why an algorithm works, as opposed to simply relying on some authoritative explanation like "follow these steps because they are the ones that work". Also, this understanding allows teachers to be able to find student's conceptual errors in arithmetic. Not only can they find mistakes, they can, along with discussions with the students, also determine the conceptual reasons behind these mistakes. Knowing the underpinnings of multiple algorithms allows a teacher to have many algorithmic tools in their toolbox. They can use their professional judgement for what is the most appropriate algorithm to use and/or teach depending on the needs of their students. </p>
            
            <p>Also, studying multiple algorithms allows teachers the opportunity to understand arithmetic through many lenses, thus increasing their overall understanding of the operations themselves. It is relatively commonplace for curricula to suggest that students develop their own personal algorithms for arithmetic. Studying multiple algorithms gives a future teacher practice in evaluating and interpreting the algorithms that students are indeed discovering (and perhaps inventing) themselves.
        </p>
        <p>
            Note that we will also learn how to use these algorithms to do arithmetic in other bases, as discussined in INSERT SECTION REFERENCE. Even though it may be unlikely that you will need to teach students how to do arithmetic in other bases, this will allow us to turn off our "muscle memory" of doing arithmetic in base ten, as we are so comfortable with many of these algorithms that it is incredibly difficult to this muscle memory off to think deeply about the algorithmeic underpinnings. As an added bonus, we will get to experience, in a small way, the struggles that your future students will have when learning about performing arithmetic for the first time. 
        </p>
    </introduction>
    <section xml:id="sec-AdditionAlgorithms">
        <title>Addition Algorithms</title>
        <subsection xml:id="subsec-TheStandardAdditionAlgorithm">
            <title>The Standard Addition Algorithm</title>
            <p>
                NOTE ON ADDITION "FACTS" OF SINGLE DIGIT SUMS
            </p>
            <p>
                NOTE ON USING MANIPULATIVES/PICTURES AS "TRAINING WHEELS"
            </p>
            
            <p>
                The vast majority of students who learn arithmetic in North America lean to add using the following algorithm. As it's so common, it usually gets named the <term>standard addition algorithm</term>. In short, starting from the smallest place value to the largest (that is, from right to left) we add the place values of our numbers separately, and regroup (or "carry") any groups of the next largest place value (so the place value directly to the left) as we go. 
            </p>
            <p>
                We can write this algorithmically (as a series of steps) as follows:
            </p>
            <ol>
                <li>
                    <p>
                        Write one number below the other so that each place value is in its own column. Now begin at the rightmost column.
                    </p>
                    </li>
                    <li>
                    <p>
                        Add the digits together (including any regroupings). If the sum is 10 or larger, write a 1 above the column to the left (this signifies that we regrouped 10 of the current place value to one of the place value to the left.)
                    </p>
                    </li>
                    <li>
                    <p>
                        If there are no non-zero digits in any column to the left, you are done. Otherwise move to the next column to the left and go to Step 2.
                    </p>
                </li>
            </ol>
            <example>
                
            
            <p>
                Let's add <m>447+629</m> slowly and carefully using this algorithm and visualize it using blocks.
            </p>
            <p>
                First, let's view the two numbers in terms of blocks:
            </p>

            <p>
                INSERT PIC OF THESE TWO NUMBERS AND THE STANDARD ALGORITHM TO THE SIDE
            </p>
            <p>
                First we add the ones place. Note tha we have <m>7+9 = 16</m> ones. We can regroup ten (10) of those to make one of the next place value, that is, one ten. We write that regrouping as a 1 above, and we are still left with 6 ones, so we can write that down:
            </p>
            <p>
                INSERT PIC OF GROUPING AND THE STEPS IN THE ALGORITHM. NOTE THAT THE CARRY IS THE REGROUPED ONES
            </p>
           <p> We now move on to the next place; the tens. We have <m>4+2+1</m> tens (the additional 1 being the regrouping from the last step). So we have 7 tens. Note that as we're working in our usual base ten, we do not have enough tens to regroup, so we simply write that we have 7 tens. </p>

           <p>
               Now let's move on to the next place; the hundreds. We have <m>4+6-10</m> hundreds. We can group all ten of those (with 0 left over after regrouping) to make one of the next place value, that is, one thousand. As this is the final place that our numbers contain, we don't need to mark a regrouping and simply write down that we have 1 thousand and 0 hundreds. 
           </p>
           <p>
               INSERT PIC OF THIS SIMILAR TO LAST TWO
           </p>
           <p>
               Thus we finally have that <m>447+629=1076</m>.
           </p>

           <p>
               If we think about this carefully, the addition algorithm above relies on the properties of associativity and commutativity in addition to place value. We are using these propertie when we add each place value separately and regroup any "carries" with the place value to the left. Let's write out what the standard addition algorithm is doing in the example above in a little more detail. 
           </p>
           <me>
               447+629 = (400+40+7) + (600+20+9) \text{ explanded place value representation}
           </me>
           <me>
               = (400+600) + (40+20) + (7+9) \text{ associativity and commutativity}
           </me>
            <me>
               = (400 +600) + (40 + 20) + (16) \text{ addition}
           </me>
           <me>
               = (400 +600) + (40 + 20) + (10+6) \text{ expanded place value representation}
           </me>
           <me>
               = (400 + 600) + (40 + 20 +10) +6 \text{ associativity and commutativity}
           </me>
           <me>
               = (400+600) +70 + 6 \text{ addition}
           </me>
           <me>
               = (1200) + 70 +6 \text{ addition}
           </me>
           <me>
               = 1000 + 200 + 70 + 6 \text{ expanded place value representation}
           </me>
           <me>
                = 1270 \text{ addition}
           </me>

           </example>
            <p>
                We won't go into as much detail with all algorithms in this section, but note that underpinning all of the algorithms are the arithmetic properties from SECTION REFERENCE
            </p>
           
           
           
           
           
           
           <p>
               Note that the pictoral/block representation becomes difficult after thousands (as we run out of dimensions, as discussed above) but the idea behind the algorithm still applies for numbers with any place values.
           </p>
           <exercise>
               <p>
                   Add the following numbers using the standard algorithm. Draw blocks as we did above and make sure to note the place values of any regroupings/carries you do:
               </p>
               <ol>
                   <li>
                       <p>
                           <m>45+58</m>
                       </p>
                   </li>
                   <li>
                       <p>
                           <m>208+737</m>
                       </p>
                   </li>
                   <li>
                       <p>
                           <m>9997+839</m>
                       </p>
                   </li>
               </ol>
           </exercise>
           <p>
               Of course, there is nothing special about base ten; we can add numbers in any base we wish! Let's look at two examples in other bases. Note that we will not have the "addition facts" of adding single digits in other bases memorized, so we have to be careful when adding. If needed we can do a little side calculation, or draw a diagram to help us.
           </p>
           <p>
               Also, so we don't get confused with the language of tens/hundreds/thousands/etc, we refer to the place value to the left of the ones the "longs" place, the next one to the left the "squares" place, and the next one to the left of that the "cubes" place.
           </p>
           <example>
               <p>
                   Using the standard addition algorithm, let's add <m>435_{seven}+43_{seven}.</m> The algorithm remains the same, except now we regroup whenever we have seven of one place. 
               </p>

               <p>
                   INSERT BLOCK PIC OF NUMBERS
               </p>

               <p>
                   We start by adding the ones. We have <m>5_{seven}+3_{seven} = 11_{seven}</m> as we regroup seven of the eight ones to get 1 long (made up of seven ones) and 1 one. We write down the one remaining:
               </p>
               <p>
                   INSERT PIC OF THIS WITH ALGORITHM TO THE SIDE
               </p>
               <p>
                   Now we move on to add the longs place. We have <m>3_{seven}+3_{seven}+3_{seven}=10_{seven}</m>. Thus we regroup seven longs to make one square, adn we have no longs left over. We write this down in our working:
               </p>
               <p>
                   INSERT PIC OF THIS WITH ALGORITHM TO THE SIDE
               </p>
              <p> Finally we add the squares place. We have <m>4_{seven}+1_{seven}=5_{seven}</m> squares, nothing that the bottom addend has no squares. Thus we write this down:  </p>

              
                  <p>
                   INSERT PIC OF THIS WITH ALGORITHM TO THE SIDE
               </p>
              <p>
                  Thus we have that <m>435_{seven}+43_{seven} = 501_{seven}</m> and we have finished.
              </p>
           </example>
           <p> Let's now work in base twelve. Remember we *do not* regroup when we have ten or eleven of one place, and we use the symbols <m>A</m> and <m>B</m> to denote these quantities, respectively. </p>
           
           <example>
              <p>
                  Let's find the sum <m>6A3_{twelve}+90B_{twelve}</m>. First of all, it will be helpful to view these as blocks:
              </p>
              <p>
                  INSERT BLOCK PIC OF NUMBERS
              </p>
              <p>
                  Let's start with the ones place. We have <m>3_{twelve}+B_{twelve} = 12_{twelve} </m> ones (think three + eleven ones is fourteen ones), where we regrouped twelve ones to make 1 long (containing twelve ones) with 2 ones remaining. We "carry" our one long, and write down our 2 ones:
              </p>
              <p>
                   INSERT PIC OF THIS WITH ALGORITHM TO THE SIDE
               </p>
               <p>
                   Now we add our longs place. We have <m>A_{twelve}+0_{twelve}+1_{twelve} = B_{twelve}</m> longs. Since eleven longs is not enough to regroup in base twelve, we simply write this down.
               </p>
               <p>
                   INSERT PIC OF THIS WITH ALGORITHM TO THE SIDE
               </p>
               <p>
                   Now we add our squares place. We have <m>6_{twelve}+9_{twelve} = 13_{twelve}</m> squares, where twelve squares are regrouped to make one of the next place value (cubes) and we have 3 squares remaining. (Do this calculation on the side to make sure that you understand it). Since we are "out" of places in our numbers we simply write this down in our algorithm:
               </p>
               <p>
                   INSERT PIC OF THIS WITH ALGORITHM TO THE SIDE
               </p>
               <p>
                   We have just calculated that <m>6A3_{twelve}+90B_{twelve} = 13B2_{twelve}</m> and we are finished.
               </p>
           </example>
           <exercise>
               <p>
                   Add the following using pictures/blocks as a guide if needed. If you do, try to make sure you understand how the blocks correspond to steps in the algorithm:
                   <ol>
                       <li>
                           <p>
                               <m>45_{eight} + 71_{eight}</m>
                           </p>
                       </li>
                       <li>
                           <p>
                               <m>210_{three}+221_{three}</m>
                           </p>
                       </li>
                       <li>
                           <p>
                               <m>54A_{twelve}+BA7_{twelve}</m>
                           </p>
                       </li>
                   </ol>
               </p>
               <p>
                   For these, do not draw pictures. Add them using only the standard addition algorithm:
                   <ol>
                       <li>
                           <p>
                               <m>552_{six}+25_{six}</m>
                           </p>
                       </li>
                       <li>
                           <p>
                               <m>101101_{two}+110111_{two}</m> (remember you only need two of a place to regroup, and the digit set base two is <m>D=\{0,1\}</m>).
                           </p>
                       </li>
                       <li>
                           <p>
                               <m>4A095_{twelve}+3BB78_{twelve}</m>
                           </p>
                       </li>
                       <li>
                           <p>
                               <m>422_{five}+344_{five}+43_{five}+141_{five}</m> (you may have to regroup more that one grouping in some places)
                           </p>
                       </li>
                   </ol>
               </p>
           </exercise>
        </subsection>
        <subsection xml:id="subsec-PartialSums">
            <title>Partial Sums</title>
            
        <p>
            In the standard algorithm, we added our regrouping to the next place value as we went. Instead, we could add each place value separately without dealing with the regroupsing and then the regroupings to each place value as our final step. This is called the <term>partial sum algorithm</term>, as you are finding the sums of each place value (these are the partial sums) and then adding these together to obtain the final answer. Let's take a look at an example, and in fact let's look at the same problem that we did previously with the standard addition algorithm:
        </p>
<example>
    <p>
            Let's add <m>447+629</m> slowly and carefully using partial sums and visualize it using blocks.
        </p>

        First we add our ones and find that we have <m>7+9=16</m> ones, noticing that we can regroup 10 ones into a long. 
        <p>
            INSERT PIC OF CALCULATION HERE
        </p>
        
        Then, we add the tens and hundreds separately: <m>40+20=60</m> and then <m> 400+600=1000</m>. We add this to our calculation above to obtain the final answer:

        <p>
            INSERT PIC OF UPDATED CALCULATION
        </p>
</example>
        

        <p>
            We note that this is not *that* different to the standard addition algorithm, as the "carries" are added at the end rather than as we go.
        </p>
        </subsection>
        <subsection xml:id="subsec-SameChangeAddition">
            <title>Same Change Algorithm</title>
            
        
        <p>
            Let's now discuss the <term>same change</term> algorithm. To help us illustate the idea (any why it's useful to know) we start with an example. Let's add <m>998+314</m> in our heads. Try doing this now.
        </p>

        <p>
            I'm sure that most people reading this book did not mentally perform the standard algorithm for this calculation. In fact, I can imagine that many people noticed that 998 was 2 smaller than 1000, so they added 2 to 1000 and, to "balance" out, they subtracted 2 from 314. Then adding <m>1000+312</m> is very easy in your head. In fact, you can use this idea to add any two numbers. </p>

        <p>
            In general, we are using the fact that if <m>a,b, \in \mathbb{N}_0</m> we know that <m>a+b = (a+c)+(b-c)</m> since we can use associativity and commutativity to rearrange the RHS to <m>a+b+(c-c) = a+b+0 = a+b</m>. In fact, since this holds for *any* whole numbers <m>a,b,c</m> we can indeed use this idea to judiciously choose the <m>c</m> in the calculation to make our computation easier. 
        </p>
        <p>
            In the first example we chose <m>c=2</m> so that our addition step in each place value was as easy as possible; adding 0 in fact does nothing. Thus, we turned our calculation into <m>(998+2)+(314-2) = 1000+312 = 1312.</m>
        </p>
        <p>
            Note that this idea doesn't necessarily make the calculation easier and other than a few cases like the above, where one number is "close" to a round number, it's not very useful. However, we bring this up because there is a related algorithm for subtraction that is very useful!
        </p>
        </subsection>
        <subsection xml:id="subsec-LatticeMethodAddition">
            <title>Lattice Algorithm </title>
            
        
        <p>
            Another common method is the lattice algorithm. This is very similar to the partial sums algorithm except regroupings are displayed slightly differently. In this algorithm, each place value has a box divided into two diagonally; one section for the place value itself, and one for the next larger place value for the regroupings. This regrouping section looks connected to the diagonal section of the box to the left which contains the same place value. Like partial sums, each place value is then added separately to obtain the final sum. Again, let's look at our usual example:
        </p>
        <example>
            <p>
                Let's add <m>447+629</m>. We align our two numbers as usual, and then draw a box for each place value split into two sections by a diagonal line, and just for teaching purposes, we will indicate the place value of each section of each box.
            </p>
            <p>
                INSERT PIC OF THIS
            </p>
            <p>
                We now add each place value separately. Starting with the ones place we add <m>7+9=16</m> ones, which we regroup into <m>1</m> ten and <m>6</m> ones. We write this in the leftmost box.
            </p>
            <p>
                INSERT PIC OF THIS
            </p>
            <p>
                We continue with the other two places similarly. Note that we do not need to regroup any tens, so we leave the hundreds section of that box blank (or we can put a <m>0</m> there). Thus are final partial sum should look like this:
            </p>
            <p>
                INSERT PIC OF THIS
            </p>
            <p>
                Finally, we add the box sections diagonally to obtain our final sum of <m>1066</m>.
            </p>
        </example>
        <p>
            STILL TO DO Estimation and Rounding (SECTION EARLIER??)
        </p>
        <p>
            STILL TO DO (MAYBE) Algorithms for adding up lots of small numbers.
        </p>
        <exercise>
            <p>
                Think about the following questions about the algorithms above:
            </p>
            <ol>
                <li>
                    <p>
                        For which algorithms is direction important? Do you need to add right-to-left, or can you add any place values in any order?
                    </p>
                </li>
                <li>
                    <p>
                        Which algorithms are easiest to explain using blocks? Which are most difficult?
                    </p>
                </li>
                <li>
                    <p>
                        Which algorithms are the quickest? Are they the quickest in all cases?
                    </p>
                </li>
                <li>
                    <p>
                        Which algorithms take up the least amount of space on your paper? Which take up the most?
                    </p>
                </li>
                <li>
                    <p>
                        For each algorithm, determine a situation where that algorithm is the best to use. The situation could be adding particular numbers efficiently, or needing to teach addition in the classroom, or some other situation!
                    </p>
                </li>
            </ol>
        </exercise>
       
        </subsection>

    </section>
    <section xml:id="sec-SubtractionAlgorithms">
        <title>Subtraction Algorithms</title>
        <introduction>
            <p>
                In the previous subsection we talked about different algorithms for adding. In some sense, all of the algorithms we talked about were the same, or at least very similar. It turns out that common subtraction algorithms actually differ from each other quite a bit.
            </p>
            <p>
                First, we'll talk about the "standard" algorithm that you most likely learned when doing subtraction, and explain why it works the way it does. Then we'll discuss some more (once very common) algorithms for subtraction that rely on the property that addition is the opposite operation of subtraction. Finally, we will study a partial difference algorithm, much like the partial sum algorithm above.
            </p>

            <p>
                We'll need some notation to easily talk about subtraction. In the subtraction problem <m>a-b=c</m> we will call <m>a</m> and <m>b</m> the <term>top number</term> and <term>botto, number</term>, respectively, and we call <m>c</m> the <term>difference</term>.  Note that some (mostly antiquated) sources call the top number the subtrahend and the bottom number the minuend. We will avoid this archaic language, as it's rarely seen or used.
            </p>
        
        
        <p>
            Standard Algorithm - Include Block Diagrams For All (reference: An Investigation of Subtraction Algorithms from the 18th and 19th Centuries - Textbooks and Cyphering Books
 An Investigation of Subtraction Algorithms from the 18th and 19th Centuriesup
An Investigation of Subtraction Algorithms from the 18th and 19th Centuries - Definitions and Algorithms 
Author(s): Nicole M. Wessman-Enzinger (Illinois State University))
</p>
</introduction>
        <subsection xml:id="subsec-StandardSubtractionAlgorithm">
            <title>Standard Subtraction Algorithm</title>
            <p>
                The idea behind the standard subtraction algorithm is that you subtract place-by-place from right to left, that is smallest to largest place value, and if you are unable to subtract that particular place, "ungrouping" or "borrowing"  one of the places to the left and including those to the right.
            </p>
            

            
            <p>
                Like the standard addition algorithm, let's list the steps for this algorithm too. Note that this is quite complicated compared to addition.
            </p>

            <ol>
                <li>
                    <p>
                        Write one number below the other so that each place value is in its own column. Now begin at the rightmost column.
                    </p>
                </li>   
                <li>
                <ol>
                    <li>
                        <p>
                           If the top digit (or digit plus regrouping) is larger than or equal to the bottom digit, subtract and put the difference below in the same column. 
                        </p>
                    </li>
                    <li>
                        <p>
                         If the top digit is smaller than the bottom digit, determine the first digit in the top number to the left of the current place that is non-zero. Decrease that place by 1, (if there are any) change the 0 digits between that digit and our current place to 9s (or whatever the largest digit in your base is, if you are subtracting in a non-ten base), and add 10 to the current top digit.
                        </p>
                   
                    </li>
                </ol>
                </li>
                <li>
                    <p>
                        If there are no non-zero digits in any column to the left, you are done. Otherwise move to the next column to the left and go to Step 2. 
                    </p>
                </li>
            </ol>

            <p>
                To make sure we understand what is happening, we will do an example along with pictoral blocks showing our subtraction.
            </p>
            <example>
                <p>
                    Let's subtract <m>4052-2457</m>. We first write the numbers aligned vertically, and view each number in terms of place value blocks:
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Now let's subtract the rightmost place. Note that the top 2 is smaller than the bottom digit, so we must borrow. The the place directly to the left has a non-zero top digit, so we regroup 1 of this place (tens) to make 10 of our current place (ones) and thus decrease the digit in that place by 1. Now we have <m>2+10=12</m> ones and we do the subtraction <m>12-7=5</m>.
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Now we move to the next place to the left; the tens place. Note that the top digit is now a 4, so it is smaller than the bottom digit 5. So again, we must borrow.
                </p>
                <p>
                    We have a zero immediately to the left of the (what was a 5 but is now a) 4, so we move to the left one more time (to the thousands place) since there is a non-zer digit in the top number there. We borrow one thousand, thus decreasing the thousands digit by 1, and ungroup that into 9 hundreds and 10 tens. In our calculation, this means changing the zero in the hundreds place in the top number to a 9, and the 4 in the tens place to a 14. 
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Now we have 14 tens and we do the subtraction in the tens column <m>14-5=9</m> . Similarly, the top number in the hundreds and thousands place is smaller so we do those subtractions as well: <m>9-4=5</m> and <m>3-2 = 1</m> respectively.
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    As we have no non-zero digits to the left of the thousands place, we are finished and we know <m>4052-2457=1595.</m>
                </p>
            </example>

            <p>
                We can perform the same algorithm in other bases too (remember, there is nothing special about base ten!). Let's try a calculation in base four:
            </p>

            <example>
                <p>
                    Let's calculate <m>2201_{four} - 1332_{four}</m> and since we are still getting used to arithmetic in other bases, let's draw some base four blocks to represent our calculation.
                </p>
                <p>
                    INSERT PIC OF THE STANDARD SETUP AND BLOCKS REPRESENTING THE SITUATION
                </p>
                <p>
                    We start from the ones digit on the right. Since the top digit is smaller than the bottom digit, we must borrow. The first non-zero digit to the left is the 2 (in the squares, or sixteens, place). We ungroup <m>1_{four}</m> sixteen (square) to <m>3_{four}</m> fours (longs) and <m>10_{four}</m> ones (remember that <m>10_{four}</m> represents the number "four"). We can see this since <m>16 = 3 \times 4 + 4 \times 1</m>, similar to our situation in the previous example in base ten. Thus we decrease the squares digit in the top number by 1 and replace the 0 in the longs place by a 3, and thus we have <m>11_{four}</m> ones (which, in base four, is five ones).
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Now, we can do the subtraction in the ones place <m>11_{four} - 2_{four} = 3_{four} </m>, since we can see that <m>2_{four}+3_{four} = 11_{four}</m>. We can subtract the longs digit as well: <m>3_{four} - 3_{four} = 0 _{four}</m>. We write these down in our calculation.
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Now, in the squares place, the digit 1 in the top number is smaller than the 3 in the bottom number, so we need to borrow again. We ungroup <m>1_{four}</m> cube (or sixty-four) to <m>10_{four}</m> squares, decreasing our 2 cubes to 1 cube.  
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Thus we now have <m>10_{four}+1_{four} = 11_{four}</m> squares and can now do our subtraction <m>11_{four}-3_{four} = 2_{four}</m>. We can also do the subtraction in the cubes place: <m>1_{four}-1_{four} = 0_{four}</m>. We now have our final difference: <m>2201_{four} - 1332_{four} = 203_{four}.</m>. 
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>

            </example>

            <exercise xml:id="exercise-SubtractionDifferentBases">
                <p>
                    Perform the following subtractions in the indicated bases. Check your answer with addition: 
                </p>
                <ol>
                    <li>
                        <p>
                            <m>65_{eight}-46_{eight}</m>
                        </p>
                    </li>
                    <li>
                        <p>
                            <m>403_{five} -123_{five}</m>
                        </p>
                    </li>
                    <li>
                        <p>
                            <m>540A8_{twelve} - 3B74A_{twelve}</m>
                        </p>
                    </li>
                    <li>
                        <p>
                            <m>10010101_{two}-1101110_{two}</m>
                        </p>
                    </li>
                </ol>
                <solution>
                    <p>
                        <m>17_{eight}</m>
                    </p>
                </solution>
                <solution>
                    <p>
                        <m>230_{five}</m>
                    </p>
                </solution>
                <solution>
                    <p>
                        <m>1455A_{twelve}</m>
                    </p>
                </solution>
                <solution>
                    <p>
                        <m>100111_{two}</m>
                    </p>
                </solution>
            </exercise>
</subsection>
          <subsection xml:id="subsec-PartialDifferences">
              <title>Partial Differences</title>
              
                  
        
        <p>
            Similar to partial sums, we can find the partial differences of each place value, and then combine these partial differences at the end to obtain our final difference. Note that this method involves being comfortable with negative numbers, and therefore integer operations. 
        </p>
        
        
       <example>
           <p>
               Let's subtract <m>4052-2457</m> again. Like before, we line up the numbers vertically by place value. In terms of blocks, we can view each place as a separate subtraction calculation with blocks of the same place value. 
           </p>
           <p>
               INCLUDE PIC HERE
           </p>
           <p>
               Order isn't important in this algorithm, so let's start from left and go right. Subtracting the thousands place, we know that <m>4000-2000 = 2000</m>. We write this partial difference in our calculation.
           </p>

            <p>
                INCLUDE PIC HERE
            </p>
            <p>
                Now, for the hundreds place, we have <m>000-400=-400.</m> (note that writing 0 as <m>000</m> is to remind you that we have <m>0</m> hundreds.) So we mark down <m>-400</m> in our calculation. Similarly, we have <m>50-50=0</m> and <m>2-7=-5</m>. We write these down in our calculation as well.
            </p>
            <p>
                INCLUDE PIC HERE
            </p>
            <p>
                So we must combine our partial differences to obtain the difference we are looking for. We have <m>2000-400+0-5</m>. Working from left to right we obtain.
            </p>
                <me>
                     1600+0-5
                </me>
                 <me>
                     =1595.
                 </me>
                 <p>
                     And we have our final answer.
                 </p> 
                 <p>
                     INCLUDE PIC HERE
                 </p>          
                            

       </example>
       
       </subsection>
       <subsection xml:id="subsec-SameChangeAlgorithm">
           <title>Same Change Algorithm</title>
           
       
        <p>
            This algorithm relies on two important concepts:
        </p>
        <ol>
            <li>
                <p>
                    Addition is easier than subtraction
                </p>
            </li>
            <li>
                <p>
                    For any number <m>a, a-0=a</m>
                </p>
            </li>
            <li>
                <p>
                    For any numbers <m>a,b,c, a-b = (a+c) - (b+c)</m>
                </p>
            </li>
        </ol>

        <p>
            The final concept says that if you add a quantity to the top number of a subtraction problem, you can add that quantity to the bottom number and not change the difference.
        </p>
        <p>
            We will call a digit <m>d</m> the <term>same-change opposite digit</term>  of another digit <m>e</m> if and only if <m>d+e=10</m>. We will shorten this to <term>opposite digit</term> if there would be no confusion. For example, the opposite digit of <m>8</m> is <m>2</m> since <m>8+2=10</m>. Also note that <m>5</m> is its own opposite digit, since <m>5+5=10</m>. Note that this definition is applicable for other bases beside base ten too! 
        </p>
        <p>
            The algorithm is as follows.
        </p>
        <ol>
            <li>
                <p>
                    Write the subtraction vertically (as usual) with place values aligned in columns. Start at the rightmost column.
                </p>
            </li>
            <li>
                <p>
                    If the top digit in this place is less than the bottom digit, add the opposite digit number of places of the bottom digit to both numbers to make a new equivalent subtraction problem (this makes the bottom digit a 0, for easy subtraction). If the top digit in this place is not less than the bottom digit, do nothing.
                </p>
            </li>
            <li>
                <p>
                    If there are non-zero digits in any place to the left of this place, move to the left one place and go to step 2. Otherwise, go to the next step.
                </p>
            </li>
            <li>
                <p>
                    Each top digit should be greater than or equal to the bottom digit in its respective place. Subtract the digits in each place to obtain your final answer.
                </p>
            </li>
            
        </ol>
        <p>
            This sounds more complicated than it actually is, so we will show an example to see this algorithm in action.
        </p>
        <example>
            <p>
                Let's subtract <m>4052-2457</m> using the same change algorithm. We line up the two numbers as usual (and we'll keep block representations along with our calculation to see the process in a pictoral way)
            </p>
            <p>
                INSERT PIC HERE
            </p>
            <p>
                Starting at the ones place, we notice that the top digit is smaller than the bottom digit, we add 3 to both the top and bottom numbers (<m>(4052+3)-(2457+3))</m>) to obtain the new subtraction problem <m>4055-2460</m>. Notice that the bottom digit is now 0, so this will eventually make subtraction easy (at the cost of doing a bit of addition)
            </p>
            <p>
                INSERT PIC HERE INCLUDING NEW SUBTRACTION PROBLEM
            </p>
            <p>
                Now we move left to the tens place. As before, we notice that the top digit is less than the bottom digit, so add the opposite digit number of tens to both numbers. Since the opposite of <m>6</m> is <m>4</m> we add <m>40</m> to both numbers (<m>(4055+40)-(2460+40)</m>) to make the new subtraction problem <m>4095-2500.</m>
            </p>
            <p>
                INSERT PIC OF THIS
            </p>
            <p>
                Moving to the hundreds place, since the top digit is less than the bottom digit, we add the opposite number of hundreds, that is <m>500</m>, to both numbers to obtain the new subtraction problem <m>4595-3000</m>.  
            </p>
            <p>
                Moving left to the thousands place, we notice that the top digit is greater than or equal to (in this case, greater than) the bottom digit, so we do nothing. Also, there are no non-zero digits in any places to our left (thousands is the largest place in our numbers) so we can now easily subtract place by place to obtain our final answer <m>4595-3000=1595.</m>
            </p>
            <p>
                INSERT PIC OF THIS
            </p>
        </example>
    </subsection>
    <subsection xml:id="subsec-EqualAdditionsAlgorithm">
        <title>Equal Additions Algorithm</title>
        <p>
            This algorithm is, in some sense, a combination between the standard subtraction algorithm and the same change algorithm. This is a "borrowing" algorithm, though instead of borrowing from the place to the left in the top number, we are "in debt" to the place to the left in the bottom number. Let's write down the algorithm and then do our usual example. 
        </p>
        <ol>
            <li>
                <p>
                   Write the subtraction vertically (as usual) with place values aligned in columns. Start at the rightmost column. 
                </p>
            </li>
            <li>
                <p>
                    If the digit in the top number is less than the digit in the bottom number (including additional ones if one is there), add ten of that place to the top digit (signified by a 1) while adding an additional 1 to the place to the left in the bottom number. Then subtract the bottom number from the top number in that place. If the digit in the top number is greater than the digit in the bottom number, do the place subtraction without any borrowing.
                </p>
            </li>
            <li>
                <p>
                    If there are any non-zero digits in any places to the left of the current place, move one place to the left and go to step 2. Otherwise you are finished.
                </p>
            </li>
        </ol>
        <example>
          <p> Let's subtract <m>4052-2457</m> using the equal addition algorithm. As usual we line up our numbers so digits of the same place value are in the same column, but this time we will have just a little bit of space between the bottom number and our difference (for any borrowed 1's that will appear). And, as usual, we will include blocks for added pictoral understanding. </p>
          <p>
              INSERT PIC HERE
          </p>
          <p>
              Starting with the ones place, we see that the digit <m>2</m> in the top number is less than the digit <m>7</m> in the bottom. So we "borrow" 10 ones, but unlike the standard subtraction algorithm we are "in debt" 1 ten to the bottom number. Thus, we have <m>(10+2)-7=12-7=5</m> ones in our difference. We mark this, and our additional debt of 1 ten, in our calculation: 
          </p>
          <p>
              INSERT PIC HERE
          </p>
          <p>
              Now we move to the tens place. We see that the <m>5</m> in the top number is less than the <m>5+1</m> in the bottom number, so we "borrow" 10 tens from 1 hundred in the same way as the previous step to have <m>(10+5)-(5+1)=15-6=9</m> tens in our difference.  We mark this, and our additional debt of 1 hundred, in our calculation: 
          </p>
          <p>
              INCLUDE PIC HERE
          </p>
          <p>
              Now we move to the hundreds place. We see that the <m>0</m> in the top number is less than the <m>4+1</m> in the bottom number, so we "borrow" 10 hundreds from 1 thousand in the same way as our previous two steps to have <m>(10+0)-(4+1)=10-5=5</m> hundreds in our difference. We mark this, and our additional debt of 1 thousand, in our calculation:
          </p>
          <p>
              INCLUDE PIC HERE
          </p>
          <p>
              Finally we move to the thousands place. We see that <m>4</m> in the top number is greater than the <m>2+1</m> in the bottom number, so we subtract without borrowing: <m>4-(2+1)=4-3=1</m> and write this in our answer. As there are no more non-zero digits to the left (that is; no larger places than thousands in our numbers,) we are finished, and we have calculated <m>4052-2457=1595.</m>
          </p>
          <p>
              INSERT PIC OF THIS
          </p>
        </example>
    <exercise>
        <p>
            Try to use the same change and equal additions algorithms to do subtraction in other bases by redo-ing the calculations in Exercise <xref ref="exercise-SubtractionDifferentBases"/>
        </p>
    </exercise>
    
       
        <p>
           Discussion of pros-cons of each and relationships. NEED TO DO THIS!!!
        </p>
         </subsection> 
    </section>
    <section xml:id="sec-MultiplicationAlgorithms">
        <title>Multiplication Algorithms</title>
        <introduction>
            <p>
                The way we multiply by hand is intrinsically based on both the ideas of place value, and the property of distributivity. In all of the following algorithms, both ideas will be important. Before we begin talking about how to multiply, we need to know how to do two things well; multiply powers of ten together, and how to multiply two single digits together. The first of these is very easy. The second is easy too, but there are a lot of different cases.
            </p>
        </introduction>
        <subsection xml:id="subsec-MultiplicationPreliminaries">
            <title>Multiplication Preliminaries</title>
            
                <p>
                    Thinking about place values as powers of ten, we can use our expoent rules to help us here. First of all, we can think of powers of ten, say <m>10^n</m>, as "a 1 followed by <m>n</m> zeroes". So, for example, <m>10^5 = 100,000.</m>.  
                </p>
                <p>
                    Using our exponent rules we know <m>10^n \times 10^m = 10^{n+m}</m>. For example, <m>10^3 \times 10^5 = 10^8</m>. Or, written as numbers, <m>1000 \times 100,000 = 100,000,000</m>. 
                </p>
                <p>
                    Moving on to multiplying single digits together, we *could* calculate these using, for example, the repeated addition model of multiplication every time, but single digit multiplication comes up so often its much better to know these off the top of our heads. It is indeed worth memorizing all single digit multiplications if you haven't yet.
                </p>
                <p>
                    INSERT PIC OF MULTIPLICATION TABLE
                </p>
                <p>
                    We can put the previous two ideas together to multiply numbers like <m>9000 \times 400,</m> using associativity and commutativity of multiplication:
                </p>
                <me>
                    9000 \times 400 = (9 \times 10^3) \times (4 \times 10^2)
                </me>
                <me>
                    =(9 \times 4) \times (10^3 \times 10^2)
                </me>
                <me>
                    = 36 \times 10^5
                </me>
                <me>
                    = 3,600,000.
                </me>
                 <exercise>
                     <p>
                         Multiply the following single digit multiples of powers of ten:
                     </p>
                     <ol>
                         <li>
                             <p>
                                 <m>30 \times 60</m>
                             </p>
                         </li>
                         <li>
                             <p>
                                 <m>500 \times 80,000</m>
                             </p>
                         </li>
                         <li>
                             <p>
                                 <m>9,000,000 \times 800,000</m>
                             </p>
                         </li>
                     </ol>
                     <solution>
                         <p>
                             <m>1800</m>
                         </p>
                     </solution>
                     <solution>
                         <p>
                             <m>40,000,000</m>
                         </p>
                     </solution>
                     <solution>
                         <p>
                             <m>7,200,000,000,000</m>
                         </p>
                     </solution>
                 </exercise>
                
                
                
            
        </subsection>
       
        <subsection xml:id="subsec-PartialProducts">
            <title>Partial Products</title>
            <p>
                All of our algorithms for multiplication rely heavily on place value and distributivity. For the <term>partial products algorithm</term> we calculate a product of two whole numbers by doing the following:
            </p>
            <ol>
                <li>
                    <p>
                        Write (or at least view in your head) both numbers in expanded form. Usually, this is done by writing the numbers so that the same place values are in the same column.
                    </p>
                   
                </li>
                <li>
                     <p>
                        Multiply each single digit multiple of powers of ten in the first number by each single digit multiple of powers of ten in the second number. For each calculation, write down this partial product, lining it up according to place value with the other partial products.
                    </p>
                </li>
                <li>
                    <p>
                        Sum all partial products together (using, for example, the standard addition algorithm) to find the final product of the two numbers.
                    </p>
                </li>
            </ol>
            <p>
                Let's do an example. Along with this example, we will include both an algebraic and pictoral representation , using the area model of multiplication, of the process.
            </p>
            <example>
                <p>
                    Let's multiply <m>348 \times 97</m>. First, we write the numbers lined up by place value, but we are thinking of these numbers in expanded form: <m>(300 + 40 + 8) \times (90 + 7). </m> Pictorally, we can view this as breaking up a rectangle with side lengths <m>348</m> and <m>97</m> units into sub rectangles where the side lengths are the terms in each expanded form.
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Now, using distributivity, we calculate each partial product: since there are 3 terms in the first expanded form and 3 in the second, we will have <m>3 \times 2 = 6</m> partial products to calculate. We can start anywhere we like, but usually one starts by multiplying the bottom ones place by every place in the top number. Then, working right to left, we multiply the tens place by every place in the top number. 
                    </p>
                    <p>
                        INSERT PIC HERE
                    </p>
                    <p>
                    
                    Algebraically, we can view this in the following way. Note that the order the terms will be first the "natual" order that one would do using distributivity, and then reordered (in fact reversed, as it's usual to perform the algorithm from right to left and bottom to top) to match the partial products algorithm:
                </p>
                <me>
                    (300+ 40 + 8) \times (90+ 7) 
                </me>
                <me>
                    = 300 \times 90 + 300 \times 7 + 40 \times 90 + 40 \times 7 + 8 \times 90 + 8 \times 7
                </me>
                <me>
                    = 7 \times 8 + 7 \times 40 + 7 \times 300 + 90 \times 8 + 90 \times 40 + 90 \times 300
                </me>
                <me>
                    = 56 + 280 + 2100 + 720 + 3600 + 27,000
                </me>
                <p>
                    Pictorally, we can view this as "sub-areas" of each rectangle:
                </p>
                
                <p>
                    INSERT PIC HERE
                </p>
                <p>
                    Finally, we sum the partial products together to get our final product. We'll do this using the standard addition algorithm. Pictorally, we are adding all sub-areas together, and algebraically we are simply adding:
                </p>
                <me>
                    = 56 + 280 + 2100 + 720 + 3600 + 27,000 = 33756
                </me>
                <p>
                    INSERT PIC HERE
                </p>
                
                
                
                
            </example>

        <p>
            Note that some people consider the pictoral representation of the partial products method its own algorithm as well. It's sometimes called the <term>grid method.</term>
        </p>
        </subsection>
       <subsection xml:id="subsec-StandardMultiplicationAlgorithm">
           <title>Standard Multiplication Algorithm</title>
           <p>
               The <term>standard multiplication algorithm</term> is, very likely, the method that you would have been taught how to multiply numbers in elementary school. It is very related to the partial products algorithm. The main difference is that we only expand one of our numbers, our "bottom number", into expanded form. For example, we would think of the multiplication <m>348 \times 97</m> as <m>348 \times (90 + 8)</m>. We can view this in our area model as only subdividing our rectangle in one direction:
           </p>

           <p>
               INSERT PIC OF THIS
           </p>
           <p>
               Note that since multiplication is commutative, we know that <m>348 \times 97 = 97 \times 348</m>. However, the calculation will be different since we would be subdividing our rectangle in "the other direction" when we think of <m>97 \times (300+40+8)</m>. Indeed, we could use this as a "check" to make sure that we did the calculation correctly; both products should, of course, be the same           </p>:

            <p>
                INSERT PIC OF THIS
            </p>

            <p>
              Of course, multiplying a non-single-digit number (like <m>348</m>) by a single digit number isn't as easy as multiplying two single digit numbers together. We will still multiply place by place, but instead of writing down each individual place multiplication calculation, we will do them all at once, and keep track of any regroupings by "carries" above the digits in our top number.   
            </p>

            <p>
                The algorithm for the standard algorithm is as follows:
            </p>
            <ol>
                <li>
                    <p>
                       Write (or at least view in your head) one of the numbers in expanded form. Usually, this is done by writing the numbers so that the same place values are in the same column so that the expanded number is the bottom number. Start with the right-most digit in the bottom number.
                    </p>
                </li>
                <li>
                    <p>
                       Starting from the right, write the number of zeroes associated to the place value of the current digit in the bottom number that you're working with in the row below the previous one you've calculated, if any exist. 
                    </p>
                </li>
                <li>
                    <p>
                        Working from right to left, multiply the bottom digit by each digit in the top number, adding any regroupings from the previous multiplication if they exist. If the product is greater than 9, regroup the tens to the next place value by writing the number of tens over the digit to the left in the top number. Write down the ones digit of your calculation to the left of the previous digit you have written, if any exist.
                    </p>
                </li>
                <li>
                    <p>
                        Once there are no more non-zero digits to the left in the top number, if there are non-zero digits to the left of your current digit in the bottom number, move one digit to the left in the bottom number and return to Step 2. If there are no non-zero numbers to the left, move on to the next step.  
                    </p>
                </li>
                <li>
                    <p>
                        Sum all partial products together (using, for example, the standard addition algorithm) to find the final product of the two numbers.
                    </p>
                </li>
            </ol>
            <p>
                As usual, we compute the same example so we can see the commonalities and diffrences between algorithms. Also, we will have a pictoral representation alongside our calculation.
            </p>
            <example>
                <p>
                    Let's multiply <m>348 \times 97</m>. First, we write the numbers lined up by place value, but we are thinking of the bottom number in expanded form: <m>(349) \times (90 + 7). </m> Pictorally, we can view this as breaking up a rectangle with side lengths <m>348</m> and <m>97</m> units into sub rectangles where the side length of <m>97</m> are the terms in the expanded form. 
                </p>
                <p>
                    INCLUDE PICTURE HERE
                </p>
                <p>
                    We start at the right hand side of the bottom number, with our aim being to calculate <m>7 \times 348</m>. Since that digit is in the ones place, we do not write down any zeroes yet. We multiply it by each digit in the top number and add any regroupings to the next place: <m>7 \times 8 = 56</m> so we write down the <m>6</m> and "carry" the <m>5</m> to the tens place. 
                </p>
                <p>
                    INSERT PIC HERE
                </p>
                <p>
                    Next, we multiply the our ones digit by the tens place, and add the regrouping: <m>7 \times 4 + 5 =28 +5 = 33</m>. We write down the <m>3</m> to the  left of the <m>6</m> and carry the other three to the hundreds place.
                </p>
                <p>
                    INSERT PIC HERE
                </p>
                <p>
                    Now, we multiply the hundreds place: <m>7 \times 3 + 3 = 21+3=24</m>. As there is no (non-zero) digit to the left, we write both digits down to the left of the <m>3</m>. Thus we have calculated <m>7 \times 348 = 2436.</m>
                </p>
                <p>
                    INSERT PIC HERE
                </p>
                <p>
                    Now we move to the tens digit of the bottom number. Our aim is now to calculate <m>90 \times 348</m>. Since the <m>9</m> is in the tens place, we first write a <m>0</m> in the right-most spot (we know that <m>90 \times 348 = 10 \times (9 \times 348)</m> so this <m>0</m> signifies that we have taken out a factor of <m>10</m>.) </p>
                  <p>  We start with <m>9 \times 8 = 72</m>. So we write down the <m>2</m> and "carry" the <m>7</m> to the next place value. Note that this <m>7</m> actually signifies <m>7</m> hundreds since we are really calculating <m>90 \times 8 = 720</m>. Similar to the first digit of the bottom number, we have <m>9 \times 4 + 7 = 43</m> and <m>9 \times 3 + 4 = 31</m>. Thus we have calculated <m>90 \times 348 = 31320</m>
                </p>
                <p>
                    INSERT PIC HERE
                </p>
                <p>
                    Now that we are out of non-zero digits in the bottom number, we simply add the two partial products we have calculated: <m>2436+31320 = 33756</m>
                </p>
                <p>
                    INSERT PIC HERE
                </p>
                <p>
                    Note that our first partial sum is the same as the <m>56+280+2100</m> in the partial sum algorithm, and similarly <m>31320 = 720 + 3600 + 27,000 </m>. We can see this relationship in the diagram too
                </p>
                <p>
                    INSERT PIC HERE
                </p>
            </example>
            
            

           
       </subsection>
       <subsection xml:id="subsec-MultiplicationInBaseTwelve">
           <title>Multiplication In Base Twelve</title>
           <p>
               Look closely at the algorithms for multiplication. Is there anything about the steps in the algorithm that are applicable to only base ten? You should see that this isn't the case. Since the ideas of an expanded form and distributivity occur in any base, we can use these algorithms to multiply in any base we like.
           </p>
           <p>
               Just like addition and subtraction, there is nothing special about base ten that allows these multiplication algorithms to work. In base <m>b</m> multiplication by powers of <m>10_b</m> behaves the same way as in base ten. Also, we have the same notion of expanded form in any base we choose. The only thing that is different is our knowledge of multiplication of single digits. Just as in base ten, we could make a "times table" for each base. However, in the interest of time and space, we will only work in one base; base twelve. Multiplying in other bases would work the same, except for the multiplication table for single digit numbers, of course.
           </p>

           <p>
               A quick reminder that in base twelve, we ony regroup when we have twleve of one place. We represent ten of a place by the symbol <m>A</m> and eleven of a place by the symbol <m>B</m>. Also, note that in this section we will assume all calculations are in base twelve, even if we do not note the base for each number; that is, for example, we'll write <m>3A \times 15</m> to mean <m>3A_{twelve} \times 15_{twelve}</m>. 
           </p>

           <p>
               First, it makes sense to develop a multiplication table for base twelve. The most straightforward way is using repeated addition for multiplication. Let's do one row/column, the 5's, to illustrate the process. Here is a blank times table for every digit in base twelve; you can copy and fill in yourself:
           </p>
           <p>
               INSERT BLANK TIMES TABLE
           </p>
           <p>
               By the property of multiplicative identity, we know that <m>1 \times 5 = 5</m> and we know that <m>2 \times 5 = 5 + 5 = A</m>, since we have ten ones (not enough to regoup). We can determine <m>3 \times 5</m> by adding <m>5</m> to <m>2 \times 5</m>. Thus we have <m>3 \times 5 = 2 \times 5 +5 = A+5 = 13</m>. We can input these into our times table in both the 5 row and 5 column since multiplication is commutative: <m>5 \times n = n \times 5</m> for any number <m>n</m>.
           </p>
           <p>
               INSERT PIC HERE
           </p>
           <p>
               We can continue in the same way, using our skills for addition in base twelve, to finish the rest of the "<m>5</m> times table":
           </p>
           <p>
               INSERT PIC HERE
           </p>

           <p>
               We can use the same idea for every other digit in base twelve to complete our entire multiplication table in base twelve for single digits. We'll leave this as an exerise:
           </p> 

           <exercise>
               <p>
                   Complete the entire multiplication table in base twelve for single digits.
               </p>
               <solution>
                   <p>
                       INSERT PIC HERE
                   </p>
               </solution>
           </exercise>

           <p>
               Now that we have our times table in base twelve, we can easily multiply any two numbers in base twelve that we want. Let's do an example using the standard algorithm, though you could use the partial products algorithm (or any other algorithm) as well.
           </p>
                <example>
                    <p>
                        Let's calculate <m>6A0B \times 3B4</m> using the standard algorithm. Let's write the numbers aligned vertically by place value first:
                    </p>
                    <p>
                        INSERT PIC OF THIS
                    </p>
                    <p>
                        Starting with the <m>4</m> in the ones place of the bottom number, we look at our times table to determine that <m>4 \times B = 38</m> so we write down the <m>8</m> and "carry" the <m>3</m>. Now moving to the next place in the top number, <m>4 \times 0 + 3 =3</m>. We write this down and we do not need to regroup. Next, <m>4 \times A = 34</m> so we write down the <m>4</m> and carry the <m>3</m>. Finally, <m>4 \times 6+3 = 20+3 = 23</m>. Thus <m>6A0B \times 4 = 23438</m>. 
                    </p>
                    <p>
                        INCLUDE PIC OF THIS
                    </p>
                    <p>
                        Now we move on to the longs place (that is, the twelves place). We put a <m>0</m> in the rightmost entry of that row and we multiply. For this partial sum we will not be as explicit with the calculation as the previous one. We have that <m>B \times B =A1</m>, <m>B \times 0 +A =A</m>, <m>B \times A = 92</m>, and <m>B \times 6 + 9 = 63</m>. Thus, <m>6A0B \times B0 = 632A10</m>.
                    </p>
                    <p>
                        INSERT PIC OF THIS
                    </p>
                    <p>
                        Next, we move on to the squares place (that is, the one-hundred-forty-fours place, or "twelve squared place"). We put a <m>0</m> in the two rightmost entries of that row and we multiply. Using a similar method to above we get that <m>6A0B \times 3 = 1862900</m>. You should check that you obtain the same answer as this!
                    </p>
                    <p>
                        INSERT PIC OF THIS
                    </p>
                        <p>
                           Finally, we sum all of our partial products. We have that <m>23438+632A10+1862900 = 22B8B48</m>. 
                        </p>
                    <p>
                    INSERT PIC OF THIS
                </p>
                </example>
                <p>
                    As you can see, the idea is the exact same as in base ten, and we simply have to remember that we are operating in a different base. 
                </p>
                
                

       </subsection>
       <subsection xml:id="subsec-RussianMultiplication">
           <title>Russian Multiplication</title>

           <p>
               The two algorithms we have learned so far are quite similar to each other. However, there are other algorithms that look quite a bit different to the ones that we have used. Let's talk about one of these, sometimes called <term>Russian multiplication</term> or <term>Ethiopian multiplication</term>. It relies on the fact that multiplication by two and division by two are inverse operations; more exactly, <m>(a \div 2) \times (b \times 2) = a \times b</m>. First we will describe the algorithm, then do an example, and then talk about why this algorithm works. 
           </p>

           <p>
               The algorithm for Russian multiplication is as follows:
           </p>
           <ol>
               <li>
                   <p>
                       Write down both numbers side by side, with plenty of space below. Usually, the smaller of the two numbers is written on the left, but it doesn't have to be. Note that this counts as a "row" in the algorithm below.
                   </p>
               </li>
               <li>
                   <p>
                       Take the left number and divide it by two. If the result is not a whole number, round down to the nearest whole number. Write this number below the left number.
                   </p>
               </li>
               <li>
                   <p>
                       Take the right number and multiply it by two. Write this number below the right number.
                   </p>
               </li>
               <li>
                   <p>
                       If the number on the left is 1, go to the next step. Else, go to Step 2.
                   </p>
               </li>
               <li>
                   <p>
                       Cross out all rows where the left number is even.
                   </p>
               </li>
               <li>
                   <p>
                       Sum the right number of all remaining rows. This sum is the product of the two numbers that you started with.
                   </p>
               </li>
           </ol>
           <p>
               If you haven't seen this algorithm before, it may look a lot different than what you're used to. Let's do an example to make sure we understand it. We'll use the same compuatation as the other algorithms.
           </p>
           <example>
               <p>Let's multiply <m>348 \times 97</m>. Since <m>97</m> is the smaller number, we will write this on the left.
               </p>
               <p>
                   INSERT PIC OF THIS
               </p>
               <p>
                   Now, we divide the left number by two. Since <m>97 \div 2  = 48.5</m>, we round down to <m>48</m> and write this number below the left number. Also, we multiply the right number by two and write this below the right number.
               </p>
               <p>
                   INSERT PIC OF THIS
               </p>
               <p>
                   We continue this process until we get to 1 on the left side. Note that <m>3 \div 2 = 1.5</m> so we round down to <m>1.</m>
               </p>
               <p>
                   INSERT PIC OF THIS
               </p>
               <p>
                   Now, we cross out all rows that contain an even number on the left. That are the rows with the left number being <m>48, 24, 12,</m> and <m>6</m>. This leaves the rows with the left number being <m>97, 3,</m> and <m>1</m>. 
               </p>
               <p>
                   INSERT PIC OF THIS
               </p>
               <p>
                   We now sum the right numbers of the remaining rows: <m>348+11,136 + 22,272 = 33756.</m>
               </p>
           </example>
           <p>
               Maybe surprisingly, we did get the product we expected, but using a calculation that is quite a bit different! Let's now explore why this algorithm works. We will lead you through the exploration below. You definitely should try this exercise before looking at the solutions!
           </p>

           <exercise>
               <ol>
                   <li>
                       <p>
                           As a warmup, draw some dots or an area diagram to convince yourself of the fact that <m>(a \div 2) \times (b \times 2) = a \times b</m>. Start with <m>a = 4</m> and <m>b=5</m>, and then do a few other examples (for now, pick even numbers for <m>a</m>). What equivalent multiplication problem have you converted <m>4 \times 5</m> to? Explain why both diagrams have the same numer of dots/same area. 
                       </p>
                   </li>
                   <li>
                       <p>
                          Now, complete the Russian algorithm with the problem <m>8 \times 10</m>. Draw a diagram for each step, and note that the only row with an odd left number is the last row. Cases where the left number is a power of <m>2</m> are the "easiest" cases to think about.
                       </p>
                   </li>
                   <li>
                       <p>
                           Now, let's try the calculation <m>9 \times 10</m>. In the second row, our left number is <m>4</m> since <m>9 \div 2 = 4.5</m> and we rounded down. Draw a diagram for both rows and describe how much is "missing" from the first row to the next. How does this relate to the calculation <m>8 \times 10</m>? Where is that number appear in your algorithm?
                       </p>
                   </li>
                   <li>
                       <p>
                           Describe what is happening in general when you round down on the left hand side. When you round down, how can you keep track of that "missing" area in your calculation?
                       </p>
                   </li>
               </ol>
               <solution>
                   <p>
                       For <m>4 \times 5</m> you should have a similar diagram to this:
                   </p>
                   <p>
                       INSERT PIC HERE
                   </p>
                   <p>
                       One way of viewing this is that we are splitting our diagram in half and then adding the bottom half to the left hand side, thus turning this into the equivalent problem <m>2 \times 10</m>.
                   </p>
               </solution>
               <solution>
                   <p>
                       You should have the following calculation and diagram:
                   </p>
                   <p>
                       INSERT PIC HERE
                   </p>
                   <p>
                       In this case, we have converted the calculation <m>8 \times 10</m> to the equivalent calculations <m>4 \times 20</m>, <m>2 \times 40</m>, and <m>1 \times 80</m>. So <m>8 \times 10 = 1 \times 80.</m>
                   </p>
               </solution>
               <solution>
                   <p>
                       Let's look at what changes from <m>9 \times 10</m> to the next line <m>4 \times 20</m>. If we didn't round down we would have <m>4.5 \times 20.</m> When we round down we are deleting area from our rectangle. We have <m>0.5 \times 20</m>, or equivalently <m>1 \times 10</m> less area than in the line above. And indeed, the amount of area we are deleting is the right-hand number of the line above. So we need to account for this missing area by adding it back in at the end.
                   </p>
                   <p>
                       INSERT PIC DESCRIBING MISSING AREA
                   </p>
                   <p>
                       After this line, the calculation is the same as <m>8 \times 10</m>. So we have the product being the right hand number of the final line <m>1 \times 80</m> plus the "missing" area, which is accounted for in the right hand number of the line <m>9 \times 10</m>. Thus <m>9 \times 10 = 80+10 = 90.</m>
                   </p>
               </solution>
               <solution>
                   <p>
                       In general, any time we round down, we're missing area equal to the right hand number of the line above. And since every time we rounded down we had an odd number on the left hand side above, we add the right hand number of those lines. 
                   </p>
               </solution>
           </exercise>
           <assemblage xml:id="assemblage-RussianBaseTwo">
               <title>Notes for Additional Understanding</title>
               <p>
                   Really, this algorithm relies on writing the left hand number in base two and then multiplying each place by the right hand number. Since <me>97 = 1 \times 2^6 + 1 \times 2^5 + 0 \times 2^4 + 0 \times 2^3 + 0 \times 2^2 + 0 \times 2^1 + 1 \times 2^0</me>, we could have viewed the calculation <m>97 \times 348</m> as (ignoring multiples of zero) <me>2^6 \times 348 + 2^5 \times 348 + 2^0 \times 348 = 22,272 + 11,136 + 348 = 33756.</me> Note the use of distributivity here too. So you can look at the Russian algorithm as like the standard algorithm, but instead in base two.
               </p>
           </assemblage>
           
       </subsection>
       <subsection xml:id="subsec-ProsAndConsOfMultiplicationAlgorithms">
           <title>Pros And Cons Of Multiplication Algorithms</title>
           <p>
               We just discussed four different methods for multiplying. Which one is better? Is one always better? In the author's opinion, there are pros and cons with each algorithm. We will discuss some of these now.
           </p>
           <subsubsection xml:id="subsubsec-PartialProductsAlgorithm">
               <title>PartialProductsAlgorithm</title>
               <p>
                   Pros:
               </p>
               <ol>
                   <li>
                       <p>
                           The idea of distribution of place value is very clear.
                       </p>
                       <p>
                           Each multiplication step is one straightforward calculation that will only invlove multiplication of powers of ten and multiplication of single digit numbers.
                       </p>
                   </li>
                   <li>
                       
                       <p>
                           We can use this algorithm to help students think about any distributive multiplication (like multiplying two polynomials, for example). 
                       </p>
                   
                   </li>
               </ol>
               <p>
                   Cons:
               </p>
               <ol>
                   <li>
                       <p>
                           There could be a lot of partial products to sum. Indeed, if the first number has <m>a</m> digits and the second <m>b</m> digits, then we need to sum <m>a \times b</m> numbers.
                       </p>
                   </li>
                   <li>
                       <p>
                           This algorithm takes up a significant amount of space on the page, especially if you have numbers with many digits.
                       </p>
                   </li>
                   
               </ol>
           </subsubsection>
           <subsubsection xml:id="subsubsec-GridMethod">
               <title>Grid Method</title>
               <p>
                   Pros:
               </p>
               <ol>
                   <li>
                       <p>
                           The distribution process over place value is highly visual. It is very apparent why the algorithm works the way it does.
                       </p>
                   </li>
                   <li>
                       <p>
                           
                           Each multiplication step is one straightforward calculation that will only invlove multiplication of powers of ten and multiplication of single digit numbers.
                       
                       </p>
                   </li>
                   <li>
                       <p>
                           We can use this algorithm to help students think about any distributive multiplication (like multiplying two polynomials, for example). 
                       </p>
                   </li>
               </ol>
               <p>
                   Cons:
               </p>
               <ol>
                   <li>
                       <p>
                           The algorithm takes up a lot of space on the page, especially for numbers with many digits.
                       </p>
                   </li>
                   <li>
                       <p>
                           There is no part of the page set aside to sum the partial products together, so it takes up even *more* room.
                       </p>
                   </li>
                   <li>
                       <p>
                           Usually, the sub rectangles aren't sized to scale, and thus it might confuse students about the size of place values.
                       </p>
                   </li>
               </ol>
               </subsubsection>  
            <subsubsection xml:id="subsubsec-StandardMultiplicationAlgorithm">
                <title>Standard Multiplication Algorithm</title>
                <p>
                    Pros:
                </p>
                <ol>
                    <li>
                        <p>
                            Doesn't take up a lot of space. In fact, if the bottom number has <m>a</m> digits, it only requires <m>a</m> rows for the partial sums (and an additional <m>a</m> rows above for the "carries".)
                        </p>
                    </li>
                    <li>
                        <p>
                            There is less adding than in the partial products and grid method algorithms.
                        </p>
                    </li>
                    <li>
                        <p>
                            It's the method that is most commonly known in North America, so it is easier to get help with this algorithm.
                        </p>
                    </li>
                </ol>
                <p>
                    Cons:
                </p>
                <ol>
                    <li>
                        <p>
                            Each row of the algorithm is a fairly complex multiplication, invloving carrying over to the next place value.
                        </p>
                    </li>
                    <li>
                        <p>
                            The idea of place value isn't as obvious in the top number, thus losing somet of the idea of distributivity in the calculation.
                        </p>
                    </li>
                    <li>
                        <p>
                            The algorithm isn't easily adaptable to multiplying other objects (like polynomials)
                        </p>
                    </li>
                </ol>
                
             

               
           </subsubsection>
           <subsection xml:id="subsec-RussianMultiplicationAlgorithm">
               <title>Russian Multiplication Algorithm</title>
               <p>
                   Pros:
               </p>
               <ol>
                   <li>
                       <p>
                           Relies on only being able to multiply and divide by one number (that is, of course, 2) 
                       </p>
                   </li>
                   <li>
                       <p>
                           The number of rows is quite small (indeed it's the number of digits in the base two representation of the left number.)
                       </p>
                   </li>
                   <li>
                       <p>
                          The number of additions is even smaller, as we sum only some of the rows. 
                       </p>
                   </li>
                   
               </ol>
               <p>
                   Cons:
               </p>
               <ol>
                   <li>
                       <p>
                           It's not a well known algorithm, so it will be hard for a student to get help with it
                       </p>
                   </li>
                   <li>
                       <p>
                           The idea of place value and distributivity is quite buried in the algorithm.
                       </p>
                   </li>
                   <li>
                       <p>
                           It cannot be used to multiply other objects (like polynomials) 
                       </p>
                   </li>
                   <li>
                       <p>
                           The number of rows to add together changes based on the base two representation, which isn't obvious at forst glance. For example, if <m>129</m> is the left number, you would need to add two numbers. However, if <m>127</m> is the left number, you would need to add seven numbers.
                       </p>
                   </li>
                   
               </ol>
               <exercise>
                   <p>
                       For each of the algorithms, list some other pros and cons for using them.
                   </p>
                   
               </exercise>
           </subsection>
           
       </subsection>
        
    </section>
    <section xml:id="sec-DivisionAlgorithms">
        <title>Division Algorithms</title>
            <introduction>
               <p>
            In this section, we will predominantly talk about only one algorithm, commonly called long division. We will talk about a few other algorithms that are minor variations of the well known long division.
        </p>
            </introduction>
        <subsection xml:id="subsec-LongDivision">
            <title>Long Division</title>
            <p>
               Consider the division problem <m>a \div b</m> where <m>a,b \in mathbb{N}.</m> The idea behind <term>long division</term> uses the partitive mode of division along with the idea of place value. Starting with the largest place value of the dividend <m>a</m>, we group as many of those place into <m>b</m> groups. Any of that place value remaining we ungroup into the next largest place value. Let's write this as an algorithm:
            </p>

            <ol>
                <li>
                    <p>
                        Write the division <m>a \div b</m> with the dividend <m>a</m> under the "long division" symbol, and the divisor <m>b</m> directly to the left.
                    </p>
                    <p>
                        INSERT PIC OF THIS
                    </p>
                </li>
                <li>
                    <p>
                        Starting with the largest place value in <m>a</m>, group as many of that place as possible evenly into <m>b</m> groups. Write the number in each group above the place value you are working with. Note that you may have some of that place value remaining.
                    </p>
                </li>
                <li>
                    <p>
                        Subtract the number you were able to group from the total of that place value to determine your palce remainder. Do this subtraction below the dividend.
                    </p>
                </li>
                <li>
                    <p>
                        If the current place value is the ones place, you have finished. The remaining ones are your <m>remainder</m> for the calculation, and the number above the dividend is the <m>quotient</m>. Otherwise, ungroup the place remainder into the next place value to the right and add these to the place to the right. Go to Step 2. 
                    </p>
                </li>
            </ol>
            <p>
                Let's do an example to see how this works.
            </p>
            <example>
                <p>
                    Let's do the calculation <m>587 \div 4</m>. We write this using the long division symbol. We think of <m>4</m> as the number of groups we are making (using the partitive model of division). 
                </p>
                <p>
                    INSERT PIC OF THIS, ALONG WITH BLOCKS TOO
                </p>
                <p>
                    Starting with the hundreds place, we find that we can group at most one hundred evenly into each of our four groups. We note this in the quotient by putting a <m>1</m> in the hundreds place. We have <m>5-4=1</m> hundred remaining.
                </p>
                <p>
                    INSERT PIC OF THIS, ALONG WITH GROUPING
                </p>
                <p>
                    Now we "ungroup" our one hundred into 10 tens, giving us <m>10+8=18</m> tens. We note this in our calculation by "bringing down" the <m>8</m> tens in the dividend.
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Now, we can evenly divide our <m>18</m> tens so that <m>4</m> are in each group, with <m>2</m> tens remaining (since <m>18=4 \times 4 +2</m>, or <m>18 \div 4 = 4R2</m>.) We write the <m>4</m> in the tens place of the quotient, and we have <m>18-4 \times 4=18-16=2</m> tens remaining. We write this down in our calculation.
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    We "ungroup" the <m>2</m> tens into <m>20</m> longs giving us <m>20+7 = 27 </m> longs. We write this in our calculation.
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
                <p>
                    Finally, we can divide our <m>27</m> ones so that <m>6</m> are in each group of <m>4</m>. We write this in our quotient and since <m>27 \div 4 = 6R3</m> we have <m>3</m> ones remaining. Since we are at the ones place we are finished our calculation, and thus <m>587 \div 4 = 146R3</m>. Each group of <m>4</m> contains <m>146</m> with <m>3</m> ones unable to be grouped evenly.
                </p>
                <p>
                    INSERT PIC OF THIS
                </p>
            </example>

        </subsection>
        <subsection xml:id="subsec-LongDivisionBaseTwelve">
            <title>Long Division Base Twelve</title>
            <p>
                Just like our other algorithms, we can perform division in any base we like. Let's do an example in base twelve. For this section, all numbers will be in base twelve even without the subscript indicating so, though sometimes it will be included for clarity.
            </p>

            <example>
               <p> Let's do the base twelve division computation <m>54A87 \div A.</m>. Remember here that <m>A</m> is our symbol for "ten". Our base twelve multiplication table will help a lot, so we include it here for easy reference:
               </p>
               <p>
                   INCLUDE BASE TWELVE TIMES TABLE
               </p>
               <p>
                   We write down our dividend and divisor in the appropraite locations. Now we perform the algorithm. We start at the <m>10^4_{twelve}</m> place (a long made of cubes) and ask "if we have 5 of this place, how many can be evenly divided among ten groups." We do not have enough to put any in the groups, so we put a zero in the quotient above this place (however, we don't need to explicity write it since we do not write whole numbers starting with a zero). We have grouped <m>0 \times A = 0 </m> of this place, and have <m>5-0=0</m> remaining.
               </p>
               <p>
                   INSERT PIC OF THIS
               </p>
               <p>
                   Each of this place can be ungrouped to twelve (that is <m>10_{twelve}</m>) of the place to the right. So we ungroup these to have <m>5 \times 10 + 4 = 54</m> of the next place value, which is <m>10^3_{twelve}</m> (that is, cubes). Similarly we ask "if we have <m>54_{twelve}</m> of this place, how many can be evenly divided among ten groups?" Using our multiplication table we see that <m>6 \times A = 50</m> and <m>7 \times A = 5A</m> thus the most we can put in our groups is <m>6</m> cubes. Thus we have grouped <m>6 \times A = 50</m> and have <m>54-50 = 4</m> cubes remaining. 
                   </p>
                   <p>
                       INSERT PIC OF THIS
                   </p>
                   <p>
                       We now ungroup these <m>4</m> cubes into forty-eight, or <m>40_{twelve}</m> squares and add these to the <m>A</m> squares we originally have. Similarly, since <m>5 \times A = 42</m> and <m>6 \times A = 50</m> we know that we can evenly put <m>5</m> squares in each of our <m>A</m> groups, and we have <m>4A-42=8</m> squares remaining.
                   </p>
                   <p>
                       INSERT PIC OF THIS
                   </p>
                   <p>
                       We ungroup these <m>8</m> squares to make ninety-six (or <m>80_{twelve}</m>) longs. Adding our original <m>8</m> longs we have <m>80+8==88</m> longs. Similarly to the previous places, we know <m>A \times A = 84</m> and <m>B \times A = 92</m> so we can evenly put <m>A</m> longs in each of our <m>A</m> groups, and we have <m>88-84=4</m> remaining.
                   </p>
                   <p>
                       INSERT PIC OF THIS
                   </p>
                   <p>
                       Finally, we ungroup these <m>4</m> longs to make <m>40_{twelve}</m> ones. Adding our original <m>7</m> ones we have <m>47</m> ones in total. Since <m>5 \times A = 42</m> and <m>6 \times A = 50</m> we know that we can evenly put <m>5</m> ones in each of our <m>A</m> groups, and we have <m>47-42=5</m> remaining. We have reached the ones place, so we are finished. Thus <m>54A87 \div A = 65A5R5.</m>

                   </p>
                   <p>
                       INSERT PIC OF THIS
                   </p>
            </example>



        </subsection>
        <p>
            Standard Algorithm (make sure to talk about regrouping of quotient at the end)
        </p>
        <p>
           Discussion of pros-cons and relationships 
        </p>
    </section>

</chapter>
